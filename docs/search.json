[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "My life in Months - Making a ‘life plot’ in R using ggplot2\n\n\n\n\n\nThis blog post is inspired by Sharla Gefland twitter post found here, where she made a ‘My Life in Months’ plot.\n\n\n\n\n\n\nOct 7, 2020\n\n\nMichael Luu\n\n\n\n\n\n\n  \n\n\n\n\nNatural Language Processing (NLP) and developing a machine learning classifier on Beyonce and Taylor Swift lyrics #TidyTuesday\n\n\n\n\n\nNLP and building a machine learning clasifier on Beyonce and Taylor Swift Lyrics #TidyTuesday\n\n\n\n\n\n\nOct 2, 2020\n\n\nMichael Luu\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Michael Luu, MPH",
    "section": "",
    "text": "Education\n\nMPH in Biostatistics & Epidemiology, 2015\nUniversity of Southern California, Keck School of Medicine\n\n\nBSc in Biological Sciences, 2009\nUniversity of California, Irvine\n\n\n\nExperience\n\nResearch Biostatistician III\nCedars-Sinai Samuel Oschin Comprehensive Cancer Center\nNov 2016 – Present\n\n\nResearch Biostatistician I\nChildren’s Hospital Los Angles, Anesthesia Critical Care Medicine\nMar 2016 – Nov 2016\n\n\nQuality Improvement Analyst\nChildren’s Hospital Los Angles, Neonatology\nJul 2015 – Nov 2016"
  },
  {
    "objectID": "posts/mylifeinmonths/index.html",
    "href": "posts/mylifeinmonths/index.html",
    "title": "My life in Months - Making a ‘life plot’ in R using ggplot2",
    "section": "",
    "text": "This blog post is inspired by Sharla Gefland twitter post found here, where she made a ‘My Life in Months’ plot.\nAnnotations have always been the bane of my existence in ggplot2, and I figured this would be a fun project to get some practice. Looking at her github repo found here, she made this figure using the waffle plot package found here. Although using the waffle package may simplify some aspects of making this figure, recreating this figure in pure ggplot2 will open up the arguments for further customization that may not be available via the waffle package.\nWe can start off by creating a tibble for the basis of the plot. The goal here is to create a tibble starting from the starting month (month/year) I was born, until the current month/year. I can create this with the help of the lubridate package, which simplifies the handling of dates in R, and using this package to further extract the month and year information from the date sequence.\n\ndf &lt;- tibble(\n  date = seq(mdy('9/1/1987'), floor_date(Sys.Date(), 'month'), 'month')\n) %&gt;%\n  mutate(\n    month = month(date),\n    year = year(date)\n  )\n\ndf &lt;- tibble(date = seq(mdy('9/1/1987'), Sys.Date(), '1 month')) %&gt;%\n  mutate(month = month(date),\n         year = year(date))\n\ndf\n\n# A tibble: 428 × 3\n   date       month  year\n   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 1987-09-01     9  1987\n 2 1987-10-01    10  1987\n 3 1987-11-01    11  1987\n 4 1987-12-01    12  1987\n 5 1988-01-01     1  1988\n 6 1988-02-01     2  1988\n 7 1988-03-01     3  1988\n 8 1988-04-01     4  1988\n 9 1988-05-01     5  1988\n10 1988-06-01     6  1988\n# ℹ 418 more rows\n\n\nUsing the tibble I just created, I can further define the ‘eras’ that I would like to highlight in the life plot.\n\nplot_data &lt;- df %&gt;%\n  mutate(\n    era = case_when(\n      date %in% mdy('9/1/1987'):mdy(\"9/1/1991\") ~ 'Childhood',\n      date %in% mdy('10/1/1991'):mdy('6/1/2005') ~ 'K-12 Grade School',\n      date %in% mdy('7/1/2005'):mdy('12/1/2009') ~ 'BSc in Biological Sciences',\n      date %in% mdy('1/1/2010'):mdy('7/1/2013') ~ 'Pre Graduate Work',\n      date %in% mdy('8/1/2013'):mdy('6/1/2015') ~ 'MPH in Biostatistics & Epidemiology',\n      date %in% mdy('7/1/2015'):mdy('8/1/2016') ~ 'Data Analyst',\n      date %in% mdy('9/1/2016'):Sys.Date() ~ 'Biostatistician'\n    )\n  ) %&gt;%\n  mutate(era = factor(\n    era,\n    levels = c(\n      'Childhood',\n      'K-12 Grade School',\n      'BSc in Biological Sciences',\n      'Pre Graduate Work',\n      'MPH in Biostatistics & Epidemiology',\n      'Data Analyst',\n      'Biostatistician'\n    )\n  ))\n\nplot_data\n\n# A tibble: 428 × 4\n   date       month  year era      \n   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n 1 1987-09-01     9  1987 Childhood\n 2 1987-10-01    10  1987 Childhood\n 3 1987-11-01    11  1987 Childhood\n 4 1987-12-01    12  1987 Childhood\n 5 1988-01-01     1  1988 Childhood\n 6 1988-02-01     2  1988 Childhood\n 7 1988-03-01     3  1988 Childhood\n 8 1988-04-01     4  1988 Childhood\n 9 1988-05-01     5  1988 Childhood\n10 1988-06-01     6  1988 Childhood\n# ℹ 418 more rows\n\n\nNext, I’ll create a base plot using ggplot2, where I’ll map the x axis to year, and the y axis to month. I’ll also use the geom, geom_tile() to create the ‘blocks’ that we see in the life plot, where we’ll map the fill to era.\n\n ggplot(plot_data, aes(y = month, x = year)) + \n  geom_tile(color = 'white', aes(fill = era), size = 1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nNow that we have a simple base plot to work with, we can further customize and clean up the figure. A trick to give us a bigger ‘space’ to work with is to expand the limits of the y and x axis. Furthermore, I will use scale_fill_d3() to add a fill theme to the plot.\n\nbase_plot &lt;- ggplot(plot_data, aes(y = month, x = year)) + \n  geom_tile(color = 'white', aes(fill = era), size = 1) + \n  scale_y_continuous(breaks = -6:18, limits = c(-6, 18)) +\n  scale_x_continuous(breaks = 1980:2020) +\n  labs(y = 'Month', x = 'Year') + \n  theme(legend.position = 'bottom') + \n  scale_fill_d3()\n  \n\nbase_plot\n\n\n\n\nAnnotations have always been tricky, because we have to specifically define the coordinates of the annotations we are trying to add. I’m going to start off small with a small annotation on the top left corner with an arrow point to the top left square. The segments are created using the geom_curve() and the text annotations are created using annotate() via geom_text()\n\n## annotate the definition of 1 square = 1 month\nplot &lt;- base_plot +\n  geom_curve(\n    x = 1987,\n    y = 12,\n    xend = 1986,\n    yend = 14,\n    curvature = -.4,\n    arrow = arrow(length = unit(0.01, \"npc\"), ends = 'first'),\n    color = 'black'\n  ) + \n  annotate(\n    'text',\n    x = 1985,\n    y = 15,\n    hjust = 0,\n    label = '1 square = 1 month',\n    family = \"Segoe Script\"\n  )\n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nNext I’ll start to map out exactly where I want each of the labels for the eras to be placed. This definitely took a while, and it helps if you have some forethought on where you want to place the labels.\n\n### set colors \npallete_colors &lt;- pal_d3(\"category10\")(10)\n\n## set size\nannotation_size &lt;- 5\n\nplot &lt;- plot + \n  annotate(\n    'text',\n    x = 1989,\n    y = -1,\n    label = 'Childhood',\n    color = pallete_colors[[1]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  )  +\n  annotate(\n    'text',\n    x = 1998,\n    y = -1,\n    label = 'K-12 Grade School',\n    color = pallete_colors[[2]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) +\n  annotate(\n    'text',\n    x = 2007.5,\n    y = -1,\n    label = 'BSc in Biological Sciences',\n    color = pallete_colors[[3]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) +\n  annotate(\n    'text',\n    x = 2011,\n    y = 14,\n    label = 'Pre Graduate Employment',\n    color = pallete_colors[[4]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) +\n  annotate(\n    'text',\n    x = 2013,\n    y = -3,\n    label = 'MPH in Biostatistics & Epidemiology',\n    color = pallete_colors[[5]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) +\n  annotate(\n    'text',\n    x = 2012.5,\n    y = 16,\n    label = 'Data Analyst',\n    color = pallete_colors[[6]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) +\n  annotate(\n    'text',\n    x = 2018.5,\n    y = -1,\n    label = 'Biostatistician',\n    color = pallete_colors[[7]],\n    size = annotation_size,\n    family = \"Segoe Script\"\n  ) \n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nNow that we have the text placed in all the designated coordinates, we can start working on the arrows.\n\n## add additional curve segments for labels\n\nplot &lt;- plot + \n  geom_curve(\n    x = 1989,\n    y = 1,\n    xend = 1989,\n    yend = -.5,\n    curvature = .2,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    color = 'black'\n  ) +\n  geom_curve(\n    x = 1998,\n    y = 1,\n    xend = 1998,\n    yend = -.5,\n    curvature = .2,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    color = 'black'\n  ) +\n  geom_curve(\n    x = 2007,\n    y = 1,\n    xend = 2007,\n    yend = -.5,\n    curvature = -.2,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    color = 'black'\n  ) +\n  geom_curve(\n    x = 2011,\n    y = 12,\n    xend = 2011,\n    yend = 13.5,\n    curvature = -.2,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    color = 'black'\n  ) +\n  geom_curve(\n    x = 2015,\n    y = 12,\n    xend =  2015,\n    yend = 16,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    color = 'black',\n    curvature = .8\n  ) +\n  geom_curve(\n    x = 2014,\n    y = 1,\n    xend =  2014,\n    yend = -2.5,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    curvature = -0.2,\n    color = 'black'\n  ) +\n  geom_curve(\n    x = 2018,\n    y = 1,\n    xend =  2018,\n    yend = -0.5,\n    arrow = arrow(length = unit(0.01, 'npc'), ends = 'first'),\n    curvature = -0.2,\n    color = 'black'\n  ) \n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nNow that we have most of the annotations on there, we can add some supplemental annotations, e.g. adding an annotations regarding each column is 1 year, and the segments to finish off the look.\n\n## let's add a label for 1 column equals 1 year of age \n\nplot &lt;- plot + \n  annotate(\n    'text',\n    x = 1985,\n    y = 6,\n    label = '1 year',\n    angle = 90,\n    size = 7,\n    color = 'black',\n    family = \"Segoe Script\"\n  ) + \n  annotate(\n    'text',\n    x = 1988,\n    y = 13,\n    label = 'age',\n    size = 5,\n    color = 'black',\n    family = \"Segoe Script\"\n  ) +\n  geom_segment(\n    x = 1988.75,\n    y = 13,\n    xend = 1993,\n    yend = 13,\n    arrow = arrow(ends = 'last', length = unit(.01, units = 'npc')),\n    color = 'black'\n  ) +\n  geom_segment(\n    x = 1985,\n    xend = 1985,\n    y = 8,\n    yend = 12,\n    color = 'black'\n  ) +\n  geom_segment(\n    x = 1985,\n    xend = 1985,\n    y = 1,\n    yend = 4,\n    color = 'black'\n  ) +\n  geom_segment(\n    x = 1984.5,\n    xend = 1985.5,\n    y = 12,\n    yend = 12,\n    color = 'black'\n  ) +\n  geom_segment(\n    x = 1984.5,\n    xend = 1985.5,\n    y = 1,\n    yend = 1,\n    color = 'black'\n  ) \n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nWe’re almost there - now that we have all the annotations we want on there, we can remove the legend and use a theme to further remove the grid as well as the x and y axis.\n\nplot &lt;- plot +\n  theme_void() +\n  theme(\n    legend.position = 'none'\n  )\n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nLet’s finish off this off by adding a title\n\n## lets add a title\nplot &lt;- plot + \n  annotate(\n    'text',\n    x = 1987,\n    y = -5,\n    label = 'Michael Luu',\n    size = 25,\n    hjust = 0,\n    fontface = 'bold.italic'\n  )\n\nplot\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nFull resolution figure can be found here along with the github repo for the full code here\n\nSession info\n\nsessionInfo()\n\nR version 4.2.2 (2022-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 22621)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] extrafont_0.19  ggsci_3.0.0     lubridate_1.9.2 forcats_1.0.0  \n [5] stringr_1.5.0   dplyr_1.1.1     purrr_1.0.1     readr_2.1.4    \n [9] tidyr_1.3.0     tibble_3.2.1    ggplot2_3.4.2   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      tools_4.2.2       digest_0.6.31    \n [5] timechange_0.2.0  jsonlite_1.8.4    evaluate_0.19     lifecycle_1.0.3  \n [9] gtable_0.3.3      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        \n[13] rstudioapi_0.14   yaml_2.3.6        xfun_0.38         fastmap_1.1.0    \n[17] Rttf2pt1_1.3.12   withr_2.5.0       knitr_1.41        systemfonts_1.0.4\n[21] hms_1.1.3         generics_0.1.3    vctrs_0.6.1       htmlwidgets_1.6.2\n[25] grid_4.2.2        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[29] textshaping_0.3.6 fansi_1.0.4       rmarkdown_2.19    farver_2.1.1     \n[33] extrafontdb_1.0   tzdb_0.3.0        magrittr_2.0.3    scales_1.2.1     \n[37] htmltools_0.5.4   colorspace_2.1-0  renv_0.16.0       ragg_1.2.5       \n[41] labeling_0.4.2    utf8_1.2.3        stringi_1.7.8     munsell_0.5.0"
  },
  {
    "objectID": "posts/taylor_swift_and_beyonce/index.html",
    "href": "posts/taylor_swift_and_beyonce/index.html",
    "title": "Natural Language Processing (NLP) and developing a machine learning classifier on Beyonce and Taylor Swift lyrics #TidyTuesday",
    "section": "",
    "text": "Let’s start off by loading the data from the tidytuesday github repository."
  },
  {
    "objectID": "posts/taylor_swift_and_beyonce/index.html#model-parameter-tuning",
    "href": "posts/taylor_swift_and_beyonce/index.html#model-parameter-tuning",
    "title": "Natural Language Processing (NLP) and developing a machine learning classifier on Beyonce and Taylor Swift lyrics #TidyTuesday",
    "section": "Model parameter tuning",
    "text": "Model parameter tuning\nThe model parameters cost and rbf_sigma will be tuned via a grid search of 10 values\n\nsvm_wf &lt;- workflow() %&gt;%\n  add_model(svm_spec) %&gt;%\n  add_recipe(rec)\n\nsvm_tune_folds &lt;- vfold_cv(train, strata = artist)\n\nset.seed(1)\nsvm_tune_res &lt;- tune_grid(\n  svm_wf,\n  resamples = svm_tune_folds,\n  grid = 10\n)\n\ntune_metrics &lt;- svm_tune_res %&gt;% collect_metrics()\n\ntune_metrics %&gt;%\n  filter(., .metric == 'accuracy') %&gt;%\n  ggplot(.,\n         aes(y = rbf_sigma, x = cost, color = mean)) +\n  geom_point() +\n  scale_color_viridis_c()\n\n\n\nsvm_tune_res %&gt;% show_best(metric = 'accuracy')\n\n# A tibble: 5 × 8\n    cost rbf_sigma .metric  .estimator  mean     n std_err .config              \n   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1 3.15    2.37e- 4 accuracy binary     0.804    10 0.0150  Preprocessor1_Model04\n2 0.439   8.95e- 2 accuracy binary     0.747    10 0.00199 Preprocessor1_Model01\n3 0.0342  4.45e- 3 accuracy binary     0.747    10 0.00199 Preprocessor1_Model02\n4 0.0177  4.34e- 8 accuracy binary     0.747    10 0.00199 Preprocessor1_Model03\n5 0.0856  8.84e-10 accuracy binary     0.747    10 0.00199 Preprocessor1_Model05\n\nbest_accuracy &lt;- svm_tune_res %&gt;% select_best(., metric = 'accuracy')\n\nbest_accuracy\n\n# A tibble: 1 × 3\n   cost rbf_sigma .config              \n  &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                \n1  3.15  0.000237 Preprocessor1_Model04"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Descriptive Statistics: The Importance of Visualization\n\nTalk presented at the annual CSHS Biostatistics Fall Lecture\n\n\n\n\n\n\n\nData Manipulation: Introduction to the tidyverse: dplyr & tidyr\n\nTalk presented for the BMS510 course\n\n\n\n\n\n\n\nDescriptive Statistics in R: Introduction to plotting in the tidyverse: ggplot2\n\nTalk presented for the BMS510 course\n\n\n\n\n\n\n\nDescriptive Statistics\n\nTalk presented for the MRM615 course"
  }
]