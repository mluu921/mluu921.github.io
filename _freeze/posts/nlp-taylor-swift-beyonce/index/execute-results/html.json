{
  "hash": "76e59fce893c2a31bd761e98ca44c1d7",
  "result": {
    "markdown": "---\ntitle: \"Natural Language Processing (NLP) and developing a machine learning classifier on Beyonce and Taylor Swift lyrics #TidyTuesday\"\ndescription: 'NLP and building a machine learning clasifier on Beyonce and Taylor Swift Lyrics #TidyTuesday'\ndate: '2020-10-02'\ntoc: true\n---\n\n\n\n\nLet's start off by loading the data from the tidytuesday github repository.\n\n# Reading in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n  theme_light() + \n    theme(panel.grid.minor = element_blank())\n)\n\nbeyonce_lyrics <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/beyonce_lyrics.csv'\n  ) %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 22616 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): line, song_name, artist_name\ndbl (3): song_id, artist_id, song_line\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ntaylor_swift_lyrics <-\n  readr::read_csv(\n    'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv'\n  )  %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 132 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Artist, Album, Title, Lyrics\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n# Data pre-processing and feature engineering\n\nIt appears the **beyonce_lyrics** and the **taylor_swift_lyrics** are the pertinent data sets for building our machine learning classifier. Let's have a closer look at the two datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeyonce_lyrics \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22,616 × 6\n   line                        song_id song_name artist_id artist_name song_line\n   <chr>                         <dbl> <chr>         <dbl> <chr>           <dbl>\n 1 If I ain't got nothing, I …   50396 1+1             498 Beyoncé             1\n 2 If I ain't got something, …   50396 1+1             498 Beyoncé             2\n 3 'Cause I got it with you      50396 1+1             498 Beyoncé             3\n 4 I don't know much about al…   50396 1+1             498 Beyoncé             4\n 5 And it's me and you           50396 1+1             498 Beyoncé             5\n 6 That's all we'll have when…   50396 1+1             498 Beyoncé             6\n 7 'Cause baby, we ain't got …   50396 1+1             498 Beyoncé             7\n 8 Darling, you got enough fo…   50396 1+1             498 Beyoncé             8\n 9 So come on, baby, make lov…   50396 1+1             498 Beyoncé             9\n10 When my days look low         50396 1+1             498 Beyoncé            10\n# ℹ 22,606 more rows\n```\n:::\n\n```{.r .cell-code}\nglimpse(beyonce_lyrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 22,616\nColumns: 6\n$ line        <chr> \"If I ain't got nothing, I got you\", \"If I ain't got somet…\n$ song_id     <dbl> 50396, 50396, 50396, 50396, 50396, 50396, 50396, 50396, 50…\n$ song_name   <chr> \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1…\n$ artist_id   <dbl> 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498…\n$ artist_name <chr> \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Be…\n$ song_line   <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n```\n:::\n\n```{.r .cell-code}\ntaylor_swift_lyrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 132 × 4\n   artist       album        title                      lyrics                  \n   <chr>        <chr>        <chr>                      <chr>                   \n 1 Taylor Swift Taylor Swift Tim McGraw                 \"He said the way my blu…\n 2 Taylor Swift Taylor Swift Picture to Burn            \"State the obvious, I d…\n 3 Taylor Swift Taylor Swift Teardrops on my Guitar     \"Drew looks at me,\\nI f…\n 4 Taylor Swift Taylor Swift A Place in This World      \"I don't know what I wa…\n 5 Taylor Swift Taylor Swift Cold As You                \"You have a way of comi…\n 6 Taylor Swift Taylor Swift The Outside                \"I didn't know what I w…\n 7 Taylor Swift Taylor Swift Tied Together With A Smile \"Seems the only one who…\n 8 Taylor Swift Taylor Swift Stay Beautiful             \"Cory's eyes are like a…\n 9 Taylor Swift Taylor Swift Should’ve Said No          \"It's strange to think …\n10 Taylor Swift Taylor Swift Mary’s Song                \"She said\\n\\\"I was seve…\n# ℹ 122 more rows\n```\n:::\n\n```{.r .cell-code}\nglimpse(taylor_swift_lyrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 132\nColumns: 4\n$ artist <chr> \"Taylor Swift\", \"Taylor Swift\", \"Taylor Swift\", \"Taylor Swift\",…\n$ album  <chr> \"Taylor Swift\", \"Taylor Swift\", \"Taylor Swift\", \"Taylor Swift\",…\n$ title  <chr> \"Tim McGraw\", \"Picture to Burn\", \"Teardrops on my Guitar\", \"A P…\n$ lyrics <chr> \"He said the way my blue eyes shinx\\nPut those Georgia stars to…\n```\n:::\n:::\n\n\nThe **beyonce_lyrics** appears to be structured differently than the **taylor_swift_lyrics**. The lyrics from Taylor Swift is stored 1 line per title/song name, while Beyonce's lyrics are stored by song lines. This is a problem, and we'll have to rectify this prior to building our classifier.\n\nMy idea of rectifying this would be to collapse the data from Beyonce's lyrics to get them into the same structure as Taylor Swift's lyrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeyonce_lyrics <- beyonce_lyrics %>%\n  group_by(\n    artist_name, song_name\n  ) %>%\n  summarise(\n    lyrics = paste0(line, collapse = ' ')\n  ) %>% \n  ungroup() %>%\n  select(\n    'artist' = artist_name,\n    'title' = song_name,\n    lyrics\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'artist_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nbeyonce_lyrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 391 × 3\n   artist  title                                                lyrics          \n   <chr>   <chr>                                                <chr>           \n 1 Beyoncé \"\\\"Self-Titled\\\" Part 1 . The Visual Album\"          \"I see music. I…\n 2 Beyoncé \"\\\"Self-Titled\\\" Part 2 . Imperfection\"              \"There's a mome…\n 3 Beyoncé \"***Flawless (Ft. Chimamanda Ngozi Adichie)\"         \"Your challenge…\n 4 Beyoncé \"***Flawless (Remix) (Ft. Nicki Minaj)\"              \"Dum-da-de-da D…\n 5 Beyoncé \"1+1\"                                                \"If I ain't got…\n 6 Beyoncé \"2017 Grammy's Best Urban Contemporary Album Speech\" \"Thank you so m…\n 7 Beyoncé \"6 Inch (Ft. The Weeknd)\"                            \"Six inch heels…\n 8 Beyoncé \"7/11\"                                               \"Shoulders side…\n 9 Beyoncé \"7/11 (Homecoming Live)\"                             \"Goddamn, godda…\n10 Beyoncé \"A Woman Like Me\"                                    \"Do you think Y…\n# ℹ 381 more rows\n```\n:::\n:::\n\n\nOkay - this appears to be much better, and will allow us to merge them together with the Taylor Swift data. Our outcome *y* that we are trying to predict will be the 'artist' column. The features *x* will be the song lyrics. In order to get them to a usable state for our model, we will have to perform some preprocessing and feature engineering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaylor_swift_lyrics <- taylor_swift_lyrics %>% \n  select(\n    artist, title, lyrics\n  )\n\ndata <- bind_rows(\n  taylor_swift_lyrics, beyonce_lyrics\n)\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 523 × 3\n   artist       title                      lyrics                               \n   <chr>        <chr>                      <chr>                                \n 1 Taylor Swift Tim McGraw                 \"He said the way my blue eyes shinx\\…\n 2 Taylor Swift Picture to Burn            \"State the obvious, I didn't get my …\n 3 Taylor Swift Teardrops on my Guitar     \"Drew looks at me,\\nI fake a smile s…\n 4 Taylor Swift A Place in This World      \"I don't know what I want, so don't …\n 5 Taylor Swift Cold As You                \"You have a way of coming easily to …\n 6 Taylor Swift The Outside                \"I didn't know what I would find\\nWh…\n 7 Taylor Swift Tied Together With A Smile \"Seems the only one who doesn't see …\n 8 Taylor Swift Stay Beautiful             \"Cory's eyes are like a jungle\\nHe s…\n 9 Taylor Swift Should’ve Said No          \"It's strange to think the songs we …\n10 Taylor Swift Mary’s Song                \"She said\\n\\\"I was seven, and you we…\n# ℹ 513 more rows\n```\n:::\n:::\n\n\nAfter merging the data together, we will split our data into a separate training and testing dataset.\n\n# Model building\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nsplits <- initial_split(data, strata = artist)\n\ntrain <- training(splits)\ntest <- testing(splits)\n```\n:::\n\n\nThe data has now been split, where 75% of the data we have available will be used to train our classifier, and the remaining 25% will be left for validation of the model and to estimate the overall performance.\n\nWe will next create a 'recipe' and perform feature engineering on our training data. We will do this in various steps, including tokenizing the lyrics, removing stop words, excluding words that appear less than 20 times, performing term-frequency inverse-document-frequency (TF-IDF), and finally normalization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(artist ~ lyrics, data = train) %>%\n  step_tokenize(lyrics) %>%\n  step_stopwords(lyrics) %>%\n  step_tokenfilter(lyrics, min_times = 20, max_tokens = 500) %>%\n  step_tfidf(lyrics) %>%\n  step_normalize(all_predictors())\n\nrec\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Inputs \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNumber of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\noutcome:   1\npredictor: 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Operations \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Tokenization for: lyrics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Stop word removal for: lyrics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Text filtering for: lyrics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Term frequency-inverse document frequency with: lyrics\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Centering and scaling for: all_predictors()\n```\n:::\n:::\n\n\nNow that we have a 'recipe' for pre-processing our data into a usable state to feed into our model, we will create a specification of the classifier. In this instance we will be building a support vector machine (SVM) classifier from the kernlab package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_spec <- svm_rbf(cost = tune(), rbf_sigma = tune()) %>%\n  set_engine('kernlab') %>%\n  set_mode('classification')\n\nsvm_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRadial Basis Function Support Vector Machine Model Specification (classification)\n\nMain Arguments:\n  cost = tune()\n  rbf_sigma = tune()\n\nComputational engine: kernlab \n```\n:::\n:::\n\n\n## Model parameter tuning\n\nThe model parameters cost and rbf_sigma will be tuned via a grid search of 10 values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_wf <- workflow() %>%\n  add_model(svm_spec) %>%\n  add_recipe(rec)\n\nsvm_tune_folds <- vfold_cv(train, strata = artist)\n\nset.seed(1)\nsvm_tune_res <- tune_grid(\n  svm_wf,\n  resamples = svm_tune_folds,\n  grid = 10\n)\n\ntune_metrics <- svm_tune_res %>% collect_metrics()\n\ntune_metrics %>%\n  filter(., .metric == 'accuracy') %>%\n  ggplot(.,\n         aes(y = rbf_sigma, x = cost, color = mean)) +\n  geom_point() +\n  scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsvm_tune_res %>% show_best(metric = 'accuracy')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 8\n    cost rbf_sigma .metric  .estimator  mean     n std_err .config              \n   <dbl>     <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n1 3.15    2.37e- 4 accuracy binary     0.804    10 0.0150  Preprocessor1_Model04\n2 0.439   8.95e- 2 accuracy binary     0.747    10 0.00199 Preprocessor1_Model01\n3 0.0342  4.45e- 3 accuracy binary     0.747    10 0.00199 Preprocessor1_Model02\n4 0.0177  4.34e- 8 accuracy binary     0.747    10 0.00199 Preprocessor1_Model03\n5 0.0856  8.84e-10 accuracy binary     0.747    10 0.00199 Preprocessor1_Model05\n```\n:::\n\n```{.r .cell-code}\nbest_accuracy <- svm_tune_res %>% select_best(., metric = 'accuracy')\n\nbest_accuracy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n   cost rbf_sigma .config              \n  <dbl>     <dbl> <chr>                \n1  3.15  0.000237 Preprocessor1_Model04\n```\n:::\n:::\n\n\n# Final Model\n\nThe optimal tuning parameters for accuracy appears to be 3.154 for cost and 0 for rbf_sigma. We will use these parameters for our final model. We will fit our final model on the full training data, and assess the performance on the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvm_final_wf <- finalize_workflow(\n  svm_wf,\n  best_accuracy\n)\n\nfinal_res <- svm_final_wf %>%\n  last_fit(splits)\n\nfinal_metrics <- final_res %>% collect_metrics()\n\nfinal_metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.802 Preprocessor1_Model1\n2 roc_auc  binary         0.892 Preprocessor1_Model1\n```\n:::\n:::\n\n\nOur final model using the tuned parameters optimizing for accuracy allowed us to achieve a model accuracy of 80.2% and ROC of 0.89\n\nLet's have a closer look at the performance of the model via a confusion matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_preds <- final_res %>%\n  collect_predictions()\n\n\nfinal_preds %>%\n  conf_mat(\n    ., artist, .pred_class\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              Truth\nPrediction     Beyoncé Taylor Swift\n  Beyoncé           96           24\n  Taylor Swift       2            9\n```\n:::\n\n```{.r .cell-code}\nfinal_preds %>%\n  conf_mat(\n    ., artist, .pred_class\n  ) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.802\n 2 kap                  binary         0.324\n 3 sens                 binary         0.980\n 4 spec                 binary         0.273\n 5 ppv                  binary         0.8  \n 6 npv                  binary         0.818\n 7 mcc                  binary         0.395\n 8 j_index              binary         0.252\n 9 bal_accuracy         binary         0.626\n10 detection_prevalence binary         0.916\n11 precision            binary         0.8  \n12 recall               binary         0.980\n13 f_meas               binary         0.881\n```\n:::\n:::\n\n\n# Closing\n\nThe model appears to be doing a decent job classifying the artist by the lyrics of the songs with an overall accuracy of 80.2%. Furthermore, the model appears to be doing a better job at classifying Beyonce lyrics than Taylor Swift's\n\nLet's have a closer look at the songs that were misclassified from our model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest %>%\n  select(., -artist) %>%\n  bind_cols(final_preds) %>%\n  select(\n    artist, title,\n    .pred_Beyoncé, `.pred_Taylor Swift`,\n    .pred_class\n  ) %>%\n  filter(\n    artist != .pred_class\n  ) %>%\n  mutate(\n    across(c(.pred_Beyoncé, `.pred_Taylor Swift`), ~ paste0(format(round(.x*100, 1), 1), '%'))\n  ) %>%\n  group_by(., artist) %>%\n  gt() %>%\n  cols_label(\n    artist = 'Artist',\n    title = 'Title',\n    .pred_Beyoncé = '% Beyonce',\n    `.pred_Taylor Swift` = '% Taylor',\n    .pred_class = 'Prediction'\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"bhfpqtymin\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#bhfpqtymin table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#bhfpqtymin thead, #bhfpqtymin tbody, #bhfpqtymin tfoot, #bhfpqtymin tr, #bhfpqtymin td, #bhfpqtymin th {\n  border-style: none;\n}\n\n#bhfpqtymin p {\n  margin: 0;\n  padding: 0;\n}\n\n#bhfpqtymin .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#bhfpqtymin .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bhfpqtymin .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bhfpqtymin .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bhfpqtymin .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bhfpqtymin .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bhfpqtymin .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bhfpqtymin .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bhfpqtymin .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#bhfpqtymin .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#bhfpqtymin .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bhfpqtymin .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bhfpqtymin .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bhfpqtymin .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bhfpqtymin .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bhfpqtymin .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#bhfpqtymin .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#bhfpqtymin .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#bhfpqtymin .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bhfpqtymin .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#bhfpqtymin .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bhfpqtymin .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bhfpqtymin .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bhfpqtymin .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bhfpqtymin .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bhfpqtymin .gt_left {\n  text-align: left;\n}\n\n#bhfpqtymin .gt_center {\n  text-align: center;\n}\n\n#bhfpqtymin .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bhfpqtymin .gt_font_normal {\n  font-weight: normal;\n}\n\n#bhfpqtymin .gt_font_bold {\n  font-weight: bold;\n}\n\n#bhfpqtymin .gt_font_italic {\n  font-style: italic;\n}\n\n#bhfpqtymin .gt_super {\n  font-size: 65%;\n}\n\n#bhfpqtymin .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#bhfpqtymin .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#bhfpqtymin .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#bhfpqtymin .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#bhfpqtymin .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#bhfpqtymin .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#bhfpqtymin .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Title\">Title</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"% Beyonce\">% Beyonce</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"% Taylor\">% Taylor</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Prediction\">Prediction</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"4\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Taylor Swift\">Taylor Swift</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Should’ve Said No</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">50.4%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">49.6%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">I’m Only Me When I’m With You</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">11.4%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">88.6%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">A Perfectly Good Heart</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">34.1%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">65.9%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Untouchable</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">92.7%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">7.3%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Hey Stephen</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">50.5%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">49.5%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Breathe</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">8.9%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">91.1%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Tell Me Why</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">45.5%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">54.5%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Better Than Revenge</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">8.4%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">91.6%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Innocent</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">31.6%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">68.4%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Ours</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">78.3%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">21.7%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">If This Was a Movie</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">11.1%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">88.9%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">22</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">27.2%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">72.8%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Sad Beautiful Tragic</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">58.4%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">41.6%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Come Back Be Here</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">31.9%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">68.1%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Welcome to New York</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">16.3%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">83.7%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Out of the Woods</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">26.7%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">73.3%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">How You Get The Girl</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">59.6%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">40.4%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">I Know Places</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">47.7%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">52.3%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">Ready For It</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">85.1%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">14.9%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">False God</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">39.8%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">60.2%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">ME</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">76.7%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">23.3%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">illicit affairs</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">97.3%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">2.7%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">betty</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">14.7%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">85.3%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr><td headers=\"Taylor Swift  title\" class=\"gt_row gt_left\">peace</td>\n<td headers=\"Taylor Swift  .pred_Beyoncé\" class=\"gt_row gt_right\">89.0%</td>\n<td headers=\"Taylor Swift  .pred_Taylor Swift\" class=\"gt_row gt_right\">11.0%</td>\n<td headers=\"Taylor Swift  .pred_class\" class=\"gt_row gt_center\">Beyoncé</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"4\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Beyoncé\">Beyoncé</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Beyoncé  title\" class=\"gt_row gt_left\">Creole</td>\n<td headers=\"Beyoncé  .pred_Beyoncé\" class=\"gt_row gt_right\">0.2%</td>\n<td headers=\"Beyoncé  .pred_Taylor Swift\" class=\"gt_row gt_right\">99.8%</td>\n<td headers=\"Beyoncé  .pred_class\" class=\"gt_row gt_center\">Taylor Swift</td></tr>\n    <tr><td headers=\"Beyoncé  title\" class=\"gt_row gt_left\">Diamonds</td>\n<td headers=\"Beyoncé  .pred_Beyoncé\" class=\"gt_row gt_right\">3.1%</td>\n<td headers=\"Beyoncé  .pred_Taylor Swift\" class=\"gt_row gt_right\">96.9%</td>\n<td headers=\"Beyoncé  .pred_class\" class=\"gt_row gt_center\">Taylor Swift</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n# Session info\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.2 (2022-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 22621)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] kernlab_0.9-32     stopwords_2.3      gt_0.9.0           future_1.32.0     \n [5] textrecipes_1.0.2  lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0     \n [9] readr_2.1.4        tidyverse_2.0.0    yardstick_1.1.0    workflowsets_1.0.1\n[13] workflows_1.1.3    tune_1.1.1         tidyr_1.3.0        tibble_3.2.1      \n[17] rsample_1.1.1      recipes_1.0.5      purrr_1.0.1        parsnip_1.1.0     \n[21] modeldata_1.1.0    infer_1.0.4        ggplot2_3.4.2      dplyr_1.1.1       \n[25] dials_1.2.0        scales_1.2.1       broom_1.0.4        tidymodels_1.0.0  \n[29] tidytuesdayR_1.0.2\n\nloaded via a namespace (and not attached):\n [1] colorspace_2.1-0    ellipsis_0.3.2      class_7.3-20       \n [4] snakecase_0.11.0    fs_1.6.1            rstudioapi_0.14    \n [7] farver_2.1.1        listenv_0.9.0       furrr_0.3.1        \n[10] SnowballC_0.7.0     bit64_4.0.5         prodlim_2023.03.31 \n[13] fansi_1.0.4         xml2_1.3.3          codetools_0.2-18   \n[16] splines_4.2.2       knitr_1.41          jsonlite_1.8.4     \n[19] compiler_4.2.2      httr_1.4.5          backports_1.4.1    \n[22] Matrix_1.5-1        fastmap_1.1.0       cli_3.6.1          \n[25] htmltools_0.5.4     tools_4.2.2         gtable_0.3.3       \n[28] glue_1.6.2          Rcpp_1.0.10         cellranger_1.1.0   \n[31] DiceDesign_1.9      vctrs_0.6.1         iterators_1.0.14   \n[34] timeDate_4022.108   gower_1.0.1         xfun_0.38          \n[37] globals_0.16.2      rvest_1.0.3         timechange_0.2.0   \n[40] lifecycle_1.0.3     renv_0.16.0         MASS_7.3-58.1      \n[43] ipred_0.9-14        vroom_1.6.1         hms_1.1.3          \n[46] parallel_4.2.2      yaml_2.3.6          curl_5.0.0         \n[49] sass_0.4.5          rpart_4.1.19        stringi_1.7.8      \n[52] tokenizers_0.3.0    foreach_1.5.2       lhs_1.1.6          \n[55] hardhat_1.3.0       lava_1.7.2.1        rlang_1.1.0        \n[58] pkgconfig_2.0.3     evaluate_0.19       lattice_0.20-45    \n[61] labeling_0.4.2      htmlwidgets_1.6.2   bit_4.0.5          \n[64] tidyselect_1.2.0    parallelly_1.35.0   magrittr_2.0.3     \n[67] R6_2.5.1            generics_0.1.3      pillar_1.9.0       \n[70] withr_2.5.0         survival_3.4-0      nnet_7.3-18        \n[73] future.apply_1.10.0 janitor_2.2.0       crayon_1.5.2       \n[76] utf8_1.2.3          tzdb_0.3.0          rmarkdown_2.19     \n[79] usethis_2.1.6       grid_4.2.2          readxl_1.4.2       \n[82] data.table_1.14.8   digest_0.6.31       GPfit_1.0-8        \n[85] munsell_0.5.0       viridisLite_0.4.1  \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}