{
  "hash": "e2e089ffb0928155a776bc71b6076f35",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advent of Code 2023, Day 5\"\ndate: '12/6/2023'\nwarning: false\nmessage: false\ncategories:\n  - advent of code\neditor_options: \n  chunk_output_type: console\nimage: \"https://miro.medium.com/max/1400/1*8NspdbQcI6w6tjZQ7kjS-A.png\"\n---\n\n\n![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*8NspdbQcI6w6tjZQ7kjS-A.png)\n\nLet's just say this puzzle made my processor go BRRRRRRRRRRRRR. \n\n> What is the lowest location number that corresponds to any of the initial seed numbers?\n\nThe idea of this puzzle is that they provided specific instructions in the puzzle input that allows us to construct the conversion tables need to convert from seed to location. The conversion tables are used to convert the seed numbers to soil, then soil to fertilizer, then fertilizer to water, then water to light, then light to temp, then temp to humidity, then finally humidity to location. \n\nI don't have the most efficient method of doing this, but it works. The strategy of this puzzle isn't very difficulty, however the sheer amount of data that needs to be processed is what makes this puzzle difficult. Each conversion table that being generated are in the hundreds of millions of rows, and there are 7 conversion tables that need to be generated for us to convert from seed to location. My strategy was to use the arrow package, which allows for out of memory processing of big data.\n\n# Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(arrow)\n```\n:::\n\n\nWe first read in the puzzle prompt, and extract out the specific instructions for each conversion table into its own data frame. We create two helper functions that helps us process the data. The first function `generate_map_conversion_data`, takes in the conversion table data, and the title of the conversion table, and returns a list of arrow tables that contains the conversion table data. The second function takes in a list of arrow tables, and the source numbers, and returns the destination numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_lines(\n  here('posts', 'aoc-2023-d5', 'puzzle-input.txt')\n)\n\nseeds <- data[1] |> \n  str_remove('seeds: ') |> \n  str_split(pattern = ' ') |> \n  unlist() |> \n  as.numeric()\n\nseed_to_soil_map <- data[4:50]\nsoil_to_fertilizer_map <- data[53:70]\nfertilizer_to_water_map <- data[73:84]\nwater_to_light_map <- data[87:135]\nlight_to_temp_map <- data[138:167]\ntemp_to_humidity_map <- data[170:192]\nhumidity_to_location_map <- data[195:237]\n\ngenerate_map_conversion_data <- \\(map_data, title) {\n  map_data <- as_tibble(map_data) |>\n    separate(value, c('destination', 'origin', 'range'), sep = ' ') |>\n    mutate(across(everything(), \\(x) as.numeric(x)))\n  \n  \n  table <- pmap(map_data, \\(destination, origin, range) {\n    arrow_table(\n      origin = seq(origin, origin + range - 1, by = 1),\n      destination = seq(destination, destination + range - 1, by = 1)\n    )\n    \n  }, .progress = glue::glue('Constructing Conversion Table for {title}:'))\n  \n  table <- concat_tables(!!!table)\n  \n}\n\nextract_map_conversion_data <-\n  \\(map_data, origin_values, title) {\n\n    map_data <- generate_map_conversion_data(map_data, title)\n    \n    map_data <- map_data |>\n      filter(origin %in% origin_values) |>\n      collect()\n    \n    origin <- map_data |> pull(origin)\n    \n    missing <- setdiff(origin_values, origin)\n    \n    if (length(missing) > 0) {\n      map_data <- tibble(origin = missing,\n                         destination = missing) |>\n        bind_rows(map_data)\n    }\n    \n    map_data\n  }\n```\n:::\n\n\nHere we generate a tibble that contains the conversion table data, and the title of the conversion table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameters <- tibble(\n  title = c(\n    'Seed to Soil',\n    'Soil to Fertilizer',\n    'Fertilizer to Water',\n    'Water to Light',\n    'Light to Temp',\n    'Temp to Humidity',\n    'Humidity to Location'\n  ),\n  data = list(\n    seed_to_soil_map,\n    soil_to_fertilizer_map,\n    fertilizer_to_water_map,\n    water_to_light_map,\n    light_to_temp_map,\n    temp_to_humidity_map,\n    humidity_to_location_map\n  )\n)\n\nparameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 Ã— 2\n  title                data      \n  <chr>                <list>    \n1 Seed to Soil         <chr [47]>\n2 Soil to Fertilizer   <chr [18]>\n3 Fertilizer to Water  <chr [12]>\n4 Water to Light       <chr [49]>\n5 Light to Temp        <chr [30]>\n6 Temp to Humidity     <chr [23]>\n7 Humidity to Location <chr [43]>\n```\n\n\n:::\n:::\n\n\nWe then use the `pwalk` function to iterate through the list of conversion tables, and extract the destination numbers from the conversion tables. We then use the `pull` function to extract the destination numbers from the arrow table, and assign it to the `origin` variable. This iterates through the list of conversion tables, and extracts the destination numbers from each conversion table, from seed to eventually location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin <- seeds\npwalk(parameters, \\(title, data) {\n  \n  out <- extract_map_conversion_data(\n    data, origin, title\n  )\n  \n  origin <<- out |> pull(destination)\n  \n  return(out)\n  \n}, .progress = 'Extracting Destination Data:')\n```\n:::\n\n\nWe then use the `min` function to find the lowest location number that corresponds to any of the initial seed numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin |> min()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}