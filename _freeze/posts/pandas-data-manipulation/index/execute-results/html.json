{
  "hash": "822754fc36b94c77991c9c2bb46812ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pandas Practice From the Perspective of an R User\"\ndate: '2024-01-29'\ntoc: true\nimage: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Pandas_logo.svg/1200px-Pandas_logo.svg.png'\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(reticulate)\n```\n:::\n\n\n\nOne of the most fundamental skillset in data science is the ability to pre process data and get it into a format that is suitable for analysis. In R, the `tidyverse` package has made this process very easy and intuitive. In Python, the `pandas` package is the equivalent of the `dplyr` package. \n\nIn this post, I will go through some of the most common data manipulation tasks in `pandas` from the perspective of an R user learning Pandas. I will also be using the `reticulate` package to run Python code in R.\n\nLet's start off with reading the palmerpenguins dataset found in the below github link, and use pandas `read_csv` to read in the data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd \n\nurl = 'https://gist.githubusercontent.com/slopp/ce3b90b9168f2f921784de84fa445651/raw/4ecf3041f0ed4913e7c230758733948bc561f434/penguins.csv'\n\ndata = pd.read_csv(url)\n```\n:::\n\n\n# 'Select'ing columns \n\nThe dplyr method of selecting columns uses the `select` function that allows us to select by index or by column name.\n\nWe can access the data in the python environment by using the `py` object within the R environment and accessing the name of the python object using the `$` operator. The using the `select` function by including unquoted column names\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy$data |> \n  as_tibble() |>\n  select(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   species island   \n   <chr>   <chr>    \n 1 Adelie  Torgersen\n 2 Adelie  Torgersen\n 3 Adelie  Torgersen\n 4 Adelie  Torgersen\n 5 Adelie  Torgersen\n 6 Adelie  Torgersen\n 7 Adelie  Torgersen\n 8 Adelie  Torgersen\n 9 Adelie  Torgersen\n10 Adelie  Torgersen\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\nThe pandas equivalent uses the `loc` method. The `loc` method allows us to select by name. The first argument is the row and the second argument is the column. \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata.loc[:,['species', 'island']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       species     island\n0       Adelie  Torgersen\n1       Adelie  Torgersen\n2       Adelie  Torgersen\n3       Adelie  Torgersen\n4       Adelie  Torgersen\n..         ...        ...\n339  Chinstrap      Dream\n340  Chinstrap      Dream\n341  Chinstrap      Dream\n342  Chinstrap      Dream\n343  Chinstrap      Dream\n\n[344 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\nOn the same note, we can also use the `iloc` method to select by index instead of name.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata.iloc[:, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       species     island\n0       Adelie  Torgersen\n1       Adelie  Torgersen\n2       Adelie  Torgersen\n3       Adelie  Torgersen\n4       Adelie  Torgersen\n..         ...        ...\n339  Chinstrap      Dream\n340  Chinstrap      Dream\n341  Chinstrap      Dream\n342  Chinstrap      Dream\n343  Chinstrap      Dream\n\n[344 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n# 'Filter'ing rows\n\nThe dplyr method of filtering rows uses the `filter` function that allows us to filter by a logical condition. Let's define a condition to filter the data by the species `Adelie`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy$data |> \n  as_tibble() |>\n  filter(species == 'Adelie')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 × 9\n   rowid species island    bill_length_mm bill_depth_mm flipper_length_mm\n   <dbl> <chr>   <chr>              <dbl>         <dbl>             <dbl>\n 1     1 Adelie  Torgersen           39.1          18.7               181\n 2     2 Adelie  Torgersen           39.5          17.4               186\n 3     3 Adelie  Torgersen           40.3          18                 195\n 4     4 Adelie  Torgersen          NaN           NaN                 NaN\n 5     5 Adelie  Torgersen           36.7          19.3               193\n 6     6 Adelie  Torgersen           39.3          20.6               190\n 7     7 Adelie  Torgersen           38.9          17.8               181\n 8     8 Adelie  Torgersen           39.2          19.6               195\n 9     9 Adelie  Torgersen           34.1          18.1               193\n10    10 Adelie  Torgersen           42            20.2               190\n# ℹ 142 more rows\n# ℹ 3 more variables: body_mass_g <dbl>, sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\nThe pandas equivalent uses the `query` method. The `query` method allows us to filter by a logical condition, similiar to dplyr's `filter` function. \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata.query('species == \"Adelie\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     rowid species     island  ...  body_mass_g     sex  year\n0        1  Adelie  Torgersen  ...       3750.0    male  2007\n1        2  Adelie  Torgersen  ...       3800.0  female  2007\n2        3  Adelie  Torgersen  ...       3250.0  female  2007\n3        4  Adelie  Torgersen  ...          NaN     NaN  2007\n4        5  Adelie  Torgersen  ...       3450.0  female  2007\n..     ...     ...        ...  ...          ...     ...   ...\n147    148  Adelie      Dream  ...       3475.0  female  2009\n148    149  Adelie      Dream  ...       3450.0  female  2009\n149    150  Adelie      Dream  ...       3750.0    male  2009\n150    151  Adelie      Dream  ...       3700.0  female  2009\n151    152  Adelie      Dream  ...       4000.0    male  2009\n\n[152 rows x 9 columns]\n```\n\n\n:::\n:::\n\n\nSimilarly, we can also use the `loc` method to filter by a logical condition. \n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata.loc[data['species'] == 'Adelie']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     rowid species     island  ...  body_mass_g     sex  year\n0        1  Adelie  Torgersen  ...       3750.0    male  2007\n1        2  Adelie  Torgersen  ...       3800.0  female  2007\n2        3  Adelie  Torgersen  ...       3250.0  female  2007\n3        4  Adelie  Torgersen  ...          NaN     NaN  2007\n4        5  Adelie  Torgersen  ...       3450.0  female  2007\n..     ...     ...        ...  ...          ...     ...   ...\n147    148  Adelie      Dream  ...       3475.0  female  2009\n148    149  Adelie      Dream  ...       3450.0  female  2009\n149    150  Adelie      Dream  ...       3750.0    male  2009\n150    151  Adelie      Dream  ...       3700.0  female  2009\n151    152  Adelie      Dream  ...       4000.0    male  2009\n\n[152 rows x 9 columns]\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}