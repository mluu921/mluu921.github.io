{
  "hash": "9036e2b9b764dbcf99fefef4a0af5ca6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advent of Code 2023, Day 12\"\ndate: '12/23/2023'\nwarning: false\nmessage: false\ncategories:\n  - advent of code\neditor_options: \n  chunk_output_type: console\nimage: \"https://miro.medium.com/max/1400/1*8NspdbQcI6w6tjZQ7kjS-A.png\"\n---\n\n\n\n\n![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*8NspdbQcI6w6tjZQ7kjS-A.png)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(rlang)\n```\n:::\n\n\n\n\n# Part 1\n\nThis is a fairly straightforward puzzle. The trickiest part of this puzzle is writing out the regex to match the proper conditions, based on the arragnements.\n\nThe idea of this puzzle is that we are given a set of conditions of 'hot springs', where . are considered 'working' and # are considered 'broken'. We area also given ? which means it can either be working or broken. We are also given a set of arragnements, or 'sets' of broken hot springs. For row #1, the arragements of 4,4 indicates there are 2 sets of 4 consecutive broken hot springs, separated by at elast 1 working hot spring. The goal is to determine the number of possible arrangements of hot springs that satisfy the given conditions.\n\nAs always, lets start off with reading in the puzzle input.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_lines(\n  here('posts', 'aoc-2023-d12', 'puzzle-input.txt')\n)\n\ndata <- data |> \n  as_tibble() |> \n  separate(value, into = c('conditions', 'arrangements'), sep = ' ')\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,000 × 2\n   conditions          arrangements\n   <chr>               <chr>       \n 1 ???#??????          4,4         \n 2 ??..#??#??.????     5,1         \n 3 ?.?.???????##?????  1,2,8       \n 4 .#????.????#??????  2,1,1,2,1,1 \n 5 ??????#????...#?... 9,1         \n 6 .???.?????.         3,1,1       \n 7 ??..?..???.         1,1         \n 8 ??.??.#..?..??###?? 2,1,1,1,6   \n 9 ????.???##          3,1,3       \n10 ???#?###?#?#.???    1,1,7,1,1   \n# ℹ 990 more rows\n```\n\n\n:::\n:::\n\n\n\n\nNow that we have the puzzle input properly formatted, I wrote the following function to help facilitate identifying the number of possible arrangements based on the given criteria. The function reads in the conditions and arrangements, and then creates a grid of all possible combinations of working and broken hot springs. It then filters the grid based on the regex pattern of the given arrangements, and returns the number of rows in the filtered grid.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetermine_possible_arrangements <- \\(conditions, arrangements) {\n  conditions <- conditions |> str_split('') |> unlist()\n  \n  conditions <- conditions |>\n    set_names(paste0('c', 1:length(conditions)))\n  \n  params <- tibble(!!!conditions) |>\n    pivot_longer(everything(), names_to = 'col_name')\n  \n  params <- params |>\n    deframe() |>\n    as.list()\n  \n  params <- map(params, \\(x) {\n    if (x == '?') {\n      expr(c('.', '#'))\n    } else {\n      expr(as.character(!!x))\n    }\n    \n  })\n  \n  grid <- expr({\n    crossing(!!!params)\n  }) |> eval()\n  \n  arrangements <- arrangements |>\n    str_split(',') |>\n    unlist()\n  \n  arrangements <-\n    map(arrangements, \\(x) paste0('#{', x, '}')) |> unlist()\n  \n  arrangements <- glue::glue_collapse(arrangements, sep = '\\\\.+')\n  \n  arrangements <- glue::glue_collapse(c('^\\\\.*', arrangements, '\\\\.*$')) |> as.character()\n  \n  cols <- paste0('c', 1:length(grid)) |> syms()\n  \n  grid <- grid |>\n    mutate(c = paste(!!!cols, sep = ''))\n  \n  grid <- grid |>\n    filter(str_detect(c, arrangements))\n  \n  nrow(grid)\n  \n}\n```\n:::\n\n\n\n\nNow that we have our function written, let's apply this for all rows in our puzzle input. We can use `purrr::map2` to iterate over both the conditions and arrangements columns, and apply our function to each row. We can then sum the results to get our final answer.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- map2(data$conditions, data$arrangements, \\(conditions, arrangements) {\n  \n  determine_possible_arrangements(conditions, arrangements)\n  \n}, .progress = TRUE)\n\nresults |> unlist() |> sum()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}