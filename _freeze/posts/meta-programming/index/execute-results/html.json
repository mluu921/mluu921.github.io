{
  "hash": "edf5d1dbee10145a99b328a409ef95f9",
  "result": {
    "markdown": "---\ntitle: \"Meta-programming with R and rlang\"\ndate: \"5/10/2023\"\ndraft: false\nwarning: false\nmessage: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n`rlang` is a powerful R package that allows the coder the ability to write code with code. The amazing book [Advanced R](https://adv-r.hadley.nz/index.html) by Hadley Wickham goes into this idea in much greater detail, but I wanted to present a small example of my favorite function `parse_expr()` from the `rlang` package in this post.\n\nIn short, `rlang` provides functions that facilitates the coder the ability to delay evaluation of expressions. Furthermore, we can manipulate the the expressions with various tools within `rlang`, by piecing together various expressions.\n\nI will be using the data from the `palmerpenguins` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(rlang)\n\ndata <- palmerpenguins::penguins\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nAs a simple example, let's say we would like to build a linear regression model for bill_length_mm, using all other variables as covariates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <-\n  lm(\n    bill_length_mm ~ species + island + bill_depth_mm + flipper_length_mm +\n      body_mass_g + sex + year,\n    data = data\n  )\n\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = bill_length_mm ~ species + island + bill_depth_mm + \n    flipper_length_mm + body_mass_g + sex + year, data = data)\n\nCoefficients:\n      (Intercept)   speciesChinstrap      speciesGentoo        islandDream  \n       -3.893e+02          9.910e+00          6.487e+00         -4.624e-01  \n  islandTorgersen      bill_depth_mm  flipper_length_mm        body_mass_g  \n       -7.327e-02          3.272e-01          5.724e-02          1.136e-03  \n          sexmale               year  \n        2.054e+00          2.023e-01  \n```\n:::\n:::\n\n\nThis is a simple example, but what would happen if there are many many covariates we would like to include in the model. We can construct the formula as a string and then use `parse_expr()` to parse the string into an expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- paste0('bill_length_mm ~ ', paste0(names(data)[names(data) != 'bill_length_mm'], collapse = ' + '))\n\nf <- parse_expr(f)\n\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbill_length_mm ~ species + island + bill_depth_mm + flipper_length_mm + \n    body_mass_g + sex + year\n```\n:::\n:::\n\n\nAs an example, we can construct an expression like so, and delay the evaluation for later time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr(lm(\"this is where the formula should be inserted\", data = data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlm(\"this is where the formula should be inserted\", data = data)\n```\n:::\n:::\n\n\nUsing the example from above, we can construct a new expression, and inject the previous expression into it using the `!!` (bang bang) operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_model <- expr(lm(!!f, data = data))\n\nlm_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlm(bill_length_mm ~ species + island + bill_depth_mm + flipper_length_mm + \n    body_mass_g + sex + year, data = data)\n```\n:::\n:::\n\n\nAs we can see, using the `!!` operator allows us to piece together various expressions. However, do note that the expression is still not evaluated. If we would like to evaluate the expression, we can pass the object `lm_model` into `eval()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_model |> eval()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = bill_length_mm ~ species + island + bill_depth_mm + \n    flipper_length_mm + body_mass_g + sex + year, data = data)\n\nCoefficients:\n      (Intercept)   speciesChinstrap      speciesGentoo        islandDream  \n       -3.893e+02          9.910e+00          6.487e+00         -4.624e-01  \n  islandTorgersen      bill_depth_mm  flipper_length_mm        body_mass_g  \n       -7.327e-02          3.272e-01          5.724e-02          1.136e-03  \n          sexmale               year  \n        2.054e+00          2.023e-01  \n```\n:::\n:::\n\n\nAlthough this is a fun toy example, the ability to piece together various pieces of expression and delay evaluation is a very power functional programming tool in R.\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}