{
  "hash": "10a9cf0263f262a15bee5b9d982ac646",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advent of Code 2023, Day 7\"\ndate: '12/8/2023'\nwarning: false\nmessage: false\ncategories:\n  - advent of code\neditor_options: \n  chunk_output_type: console\nimage: \"https://miro.medium.com/max/1400/1*8NspdbQcI6w6tjZQ7kjS-A.png\"\n---\n\n\n![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*8NspdbQcI6w6tjZQ7kjS-A.png)\n\nTime for some Camel Cards (Poker)! This was a fun puzzle, that really made me think outside of the box.\n\n# Part 1\n\nWe are given a hand and a set of rules on how to rank the hand. The rules are as follows:\n\n> In Camel Cards, you get a list of hands, and your goal is to order them based on the strength of each hand. A hand consists of five cards labeled one of A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, or 2. The relative strength of each card follows this order, where A is the highest and 2 is the lowest. The strength of a hand is determined by the highest ranked card in the hand, with ties broken by the second highest ranked card, and so on. \n\nLet's start off by reading in the data and separating the hand and bid into separate columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_lines(\n  here('posts', 'aoc-2023-d7', 'puzzle-input.txt')\n)\n\ndata <- data |> \n  as_tibble() |> \n  separate(value, into = c('hand', 'bid'), sep = ' ')\n```\n:::\n\n\nNow let's recap on the prompt of the puzzle.\n\n> Find the rank of every hand in your set. What are the total winnings?\n\nI wrote a simple function, `check_hand_type` to identify the type of hand that we are given. The function works by taking a count of the number of unique values in the hand, then assigning the type of either, 'ONE PAIR', 'TWO PAIR', 'THREE OF A KIND', 'FULL HOUSE', 'FOUR OF A KIND', or 'STRAIGHT'. If the hand is not one of these types, then it is a 'HIGH CARD'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_hand_type <- \\(x) {\n  values <- str_split(x, '') |> unlist()\n  \n  counts <- values |> as_tibble() |> count(value)\n  \n  counts <- counts |> pull(n)\n  \n  if (length(counts) == 4) {\n    if (all(sort(counts) == c(1, 1, 1, 2))) {\n      type <- 'ONE PAIR'\n    }\n    \n  }\n  \n  if (length(counts) == 3) {\n    if (all(sort(counts) == c(1, 2, 2))) {\n      type <- 'TWO PAIR'\n    }\n    \n    if (all(sort(counts) == c(1, 1, 3))) {\n      type <- 'THREE OF A KIND'\n    }\n    \n  }\n  \n  if (length(counts) == 2) {\n    \n    if (all(sort(counts) == c(2, 3))) {\n      type <- 'FULL HOUSE'\n    }\n    \n    if (all(sort(counts) == c(1, 4))) {\n      type <- 'FOUR OF A KIND'\n    }\n    \n  }\n  \n  if (length(counts) == 1) {\n    type <- 'FIVE OF A KIND'\n  }\n  \n  if (length(counts) == 5) {\n    type <- 'HIGH CARD'\n  }\n  \n  type\n  \n}\n```\n:::\n\n\nNext, let's apply this function to every hand in our data. Then we will convert the type to a factor, and order the levels in the correct order of increasing strength.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |> \n  rowwise() |> \n  mutate(\n    type = check_hand_type(hand)\n  ) |> \n  ungroup()\n\ndata <- data |> \n  mutate(\n    type = factor(\n      type,\n      levels = c(\n        'HIGH CARD',\n        'ONE PAIR',\n        'TWO PAIR',\n        'THREE OF A KIND',\n        'FULL HOUSE',\n        'FOUR OF A KIND',\n        'FIVE OF A KIND'\n      ),\n      ordered = TRUE\n    )\n  )\n```\n:::\n\n\nNow that we have the type of each hand, we can apply the first level of ranking by the the type. Next within each type, we will further rank the hands by the highest card, then the second highest card, and so on. We will do this by splitting the hand into separate columns, then using `arrange` on each of the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- rev(c('A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2'))\n\ndata <- data |>\n  group_nest(type) |>\n  mutate(data = map(data, \\(data) {\n    data <- data |>\n      mutate(splits = str_split(hand, '')) |>\n      rowwise() |>\n      mutate(\n        card1 = splits[[1]],\n        card2 = splits[[2]],\n        card3 = splits[[3]],\n        card4 = splits[[4]],\n        card5 = splits[[5]]\n      ) |>\n      ungroup() |>\n      arrange(card1)\n    \n    data <- data |>\n      mutate(across(contains('card'), \\(x) {\n        factor(x, levels = weights, ordered = TRUE)\n      }))\n    \n    data |>\n      arrange(card1,\n              card2,\n              card3,\n              card4,\n              card5) |> \n      select(-splits)\n    \n  })) \n```\n:::\n\n\nOnce we have the ranking of the hands, we can calculate the total winnings by multiplying the rank by the bid. Then we can sum the total winnings to get the answer to the puzzle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |> \n  unnest(data) |> \n  mutate(\n    rank = row_number(),\n    .before = type\n  ) |> \n  mutate(\n    total_winnings = rank * as.numeric(bid)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(data$total_winnings)\n```\n:::\n\n\n# Part 2\n\nThe second part of the puzzle asks us to consider the following:\n\n> To make things a little more interesting, the Elf introduces one additional rule. Now, J cards are jokers - wildcards that can act like whatever card would make the hand the strongest type possible.\n\nWith the prompt as follows: \n\n> Using the new joker rule, find the rank of every hand in your set. What are the new total winnings?\n\nOverall the second part of the puzzle is very similar to the first part. The only difference is that we need to consider the jokers in our ranking. To do this, we will add a new column to our data, `jokers`, which will tally the number of jokers in each hand. Then we will create a new column, `new_type`, which will be the type of the hand with the jokers considered. We will do this by using `case_when` to assign the new type based on the original type and the number of jokers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  mutate(jokers = str_count(hand, 'J')) |>\n  mutate(\n    new_type = case_when(\n      type == 'FOUR OF A KIND' & jokers == 1 ~ 'FIVE OF A KIND',\n      type == 'HIGH CARD' & jokers == 1 ~ 'ONE PAIR',\n      type == 'ONE PAIR' & jokers == 1 ~ 'THREE OF A KIND',\n      type == 'ONE PAIR' & jokers == 2 ~ 'THREE OF A KIND',\n      type == 'TWO PAIR' & jokers == 1 ~ 'FULL HOUSE',\n      type == 'TWO PAIR' & jokers == 2 ~ 'FOUR OF A KIND',\n      type == 'THREE OF A KIND' & jokers == 1 ~ 'FOUR OF A KIND',\n      type == 'FULL HOUSE' & jokers == 2 ~ 'FIVE OF A KIND',\n      type == 'FULL HOUSE' & jokers == 3 ~ 'FIVE OF A KIND',\n      type == 'FOUR OF A KIND' & jokers == 4 ~ 'FIVE OF A KIND',\n      type == 'FIVE OF A KIND' & jokers == 5 ~ 'FIVE OF A KIND',\n      jokers == 0 ~ type\n    )\n  )\n\ndata <- data |> \n  mutate(\n    new_type = factor(\n      new_type,\n      levels = c(\n        'HIGH CARD',\n        'ONE PAIR',\n        'TWO PAIR',\n        'THREE OF A KIND',\n        'FULL HOUSE',\n        'FOUR OF A KIND',\n        'FIVE OF A KIND'\n      ),\n      ordered = TRUE\n    )\n  )\n```\n:::\n\n\nNow that we have the new type of each hand, we can apply the first level of ranking by the the type. We will modify the previous code in which we will now rank the `J` as the weakest card. The rest is identical to Part 1 to tally the total winnings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- rev(c('A', 'K', 'Q', 'T', '9', '8', '7', '6', '5', '4', '3', '2', 'J'))\n\ndata <- data |>\n  group_nest(new_type) |>\n  mutate(data = map(data, \\(data) {\n    data <- data |>\n      mutate(splits = str_split(hand, '')) |>\n      rowwise() |>\n      mutate(\n        card1 = splits[[1]],\n        card2 = splits[[2]],\n        card3 = splits[[3]],\n        card4 = splits[[4]],\n        card5 = splits[[5]]\n      ) |>\n      ungroup() |>\n      arrange(card1)\n    \n    data <- data |>\n      mutate(across(contains('card'), \\(x) {\n        factor(x, levels = weights, ordered = TRUE)\n      }))\n    \n    data |>\n      arrange(card1,\n              card2,\n              card3,\n              card4,\n              card5) |> \n      select(-splits)\n    \n  })) \n\ndata <- data |> \n  unnest(data) |> \n  mutate(\n    rank = row_number(),\n    .before = type\n  ) |> \n  mutate(\n    total_winnings = rank * as.numeric(bid)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(data$total_winnings)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}