---
title: "Implementation of ShinyLive in Quarto"
date: "11/15/2023"
---

The following blogpost is an example implementation of ShinyLive. A traditional Shiny application requires a Shiny Server for computation, that handles both the computation and serving the application to the user. The inverse is true with the implementation of ShinyLive and WebR, where the application can be hosted on a static web server similar to GitHub Pages, and the computation is handled by the user themselves. The following blogpost is an example of how to implement ShinyLive in Quarto using the [shinylive-quarto extension](https://quarto-ext.github.io/shinylive/).

The source code for the following blogpost can be found here

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)

```
