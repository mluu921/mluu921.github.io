---
title: "Implementation of ShinyLive in Quarto"
date: "11/15/2023"
image: "https://shiny.posit.co/py/docs/shinylive-shinylive-deployment-model.png"
---

The following blogpost is an example implementation of ShinyLive.

A traditional Shiny application requires a Shiny Server for computation, that handles both the computation and serving the application to the user.

![](https://shiny.posit.co/py/docs/shinylive-shiny-deployment-model.png){fig-align="center"}

The inverse is true with the implementation of ShinyLive and WebR, where the application can be hosted on a static web server similar to GitHub Pages, and the computation is handled by the user themselves.

![](https://shiny.posit.co/py/docs/shinylive-shinylive-deployment-model.png){fig-align="center"}

The current blogpost is an example implementation of ShinyLive in Quarto using the [shinylive-quarto extension](https://quarto-ext.github.io/shinylive/). Source code for the current blogpost can be found [here](https://github.com/mluu921/mluu921.github.io/blob/master/posts/quarto-shinylive/index.qmd).

More information regarding the implementation of shinylive can be found [here](https://shiny.posit.co/py/docs/shinylive.html).

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)

```
