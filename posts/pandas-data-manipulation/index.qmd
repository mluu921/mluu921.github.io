---
title: "Pandas Practice From the Perspective of an R User (Part 1)"
date: '2024-01-29'
toc: true
image: 'https://images.unsplash.com/photo-1597953601374-1ff2d5640c85?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
editor_options: 
  chunk_output_type: console
---

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(reticulate)
```


One of the most fundamental skillset in data science is the ability to pre process data and get it into a format that is suitable for analysis. In R, the `tidyverse` package has made this process very easy and intuitive. In Python, the `pandas` package is the equivalent of the `dplyr` package. 

In this post, I will go through some of the most common data manipulation tasks in `pandas` from the perspective of an R user learning Pandas. I will also be using the `reticulate` package to run Python code in R.

Let's start off with reading the palmerpenguins dataset found in the below github link, and use pandas `read_csv` to read in the data.

```{python}
import pandas as pd 

url = 'https://gist.githubusercontent.com/slopp/ce3b90b9168f2f921784de84fa445651/raw/4ecf3041f0ed4913e7c230758733948bc561f434/penguins.csv'

data = pd.read_csv(url)

```

# 'Select'ing columns 

The dplyr method of selecting columns uses the `select` function that allows us to select by index or by column name.

We can access the data in the python environment by using the `py` object within the R environment and accessing the name of the python object using the `$` operator. The using the `select` function by including unquoted column names

```{r}
py$data |> 
  as_tibble() |>
  select(species, island)
```

The pandas equivalent uses the `loc` method. The `loc` method allows us to select by name. The first argument is the row and the second argument is the column. 

```{python}
data.loc[:,['species', 'island']]

```

On the same note, we can also use the `iloc` method to select by index instead of name.

```{python}

data.iloc[:, 1:3]

```

# 'Filter'ing rows

The dplyr method of filtering rows uses the `filter` function that allows us to filter by a logical condition. Let's define a condition to filter the data by the species `Adelie`.

```{r}
py$data |> 
  as_tibble() |>
  filter(species == 'Adelie')
```

The pandas equivalent uses the `query` method. The `query` method allows us to filter by a logical condition, similiar to dplyr's `filter` function. 

```{python}
data.query('species == "Adelie"')
```

Similarly, we can also use the `loc` method to filter by a logical condition. 

```{python}

data.loc[data['species'] == 'Adelie']

```


