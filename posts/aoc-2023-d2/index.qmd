---
title: "Advent of Code 2023, Day 2"
date: '12/3/2023'
warning: false
message: false
categories:
  - advent of code
editor_options: 
  chunk_output_type: console
image: "https://miro.medium.com/max/1400/1*8NspdbQcI6w6tjZQ7kjS-A.png"
---

![](https://miro.medium.com/v2/resize:fit:4800/format:webp/1*8NspdbQcI6w6tjZQ7kjS-A.png)

```{r}
library(tidyverse)
library(here)

```

# Part 1

The solution for Part 1 was actually quite simple. The major complexity of this puzzle is due to the data not being in a 'tidy' format. The majority of the code below is just cleaning the data

```{r}
data <- read_lines(
  here('posts', 'aoc-2023-d2', 'puzzle-input.txt')
)

data <- as_tibble(data)

data <- data |> 
  separate(value, sep = ': ', into = c('game', 'value')) |> 
  separate(value, sep = '; ', into = paste0('set', 1:10)) |> 
  pivot_longer(contains('set'), names_to = 'set') |> 
  filter(!is.na(value)) |> 
  separate(value, sep = ', ', into = paste0('cube', 1:3)) |> 
  pivot_longer(contains('cube'), names_to = 'cube') |> 
  filter(!is.na(value)) |> 
  separate(value, sep = ' ', into = c('count', 'color')) |> 
  pivot_wider(names_from = 'color', values_from = 'count', values_fill = '0') |> 
  mutate(across(c('blue', 'red', 'green'), as.numeric)) |> 
  mutate(game_id = str_extract(game, '\\d+'), .after = game)

data

```

Now that we have the data in a 'tidy' format, let's refer back to the puzzle prompt.

> The Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?

We can figure this out by using `filter` on each color columns and checking whether any of the games contained any invalid number of cubes.

```{r}
res <- data |> 
  group_by(game) |>
  mutate(
    valid = case_when(
      any(red > 12 | green > 13 | blue > 14) ~ FALSE,
      .default = TRUE
    )
  ) |> 
  ungroup() |> 
  filter(valid == TRUE)

res

```

Once we have the valid games, we can simply sum the game_id columns to get the solution

```{r}
res |> pull(game_id) |> unique() |> 
  as.numeric() |> sum()
```

# Part 2

Again, the solution for Part 2 is quite simple once we have the data in a 'tidy' format.

> For each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?

The elfs would like to know what is the 'minimum' number of cubes that has to be in each bag for each of the games played. The solution is the sum of the 'power' (defined as the product of the number of cubes for each color). We can solve this by taking the maximum number of cubes observed for a given game, then taking the product of the maximum number of cubes for each color.

```{r}

res <- data |> 
  group_by(game) |>
  summarise(across(c(blue, red, green), \(x) max(x))) |> 
  mutate(power = blue * red * green)

res

res |> summarise(total_power = sum(power))
```
